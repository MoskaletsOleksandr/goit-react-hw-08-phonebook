{"version":3,"file":"static/js/225.6c0a32ca.chunk.js","mappings":"kKAGaA,EAAS,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAC1C,OACE,SAAC,IAAD,CAAcD,QAASA,EAASC,SAAUA,EAA1C,SACGF,GAGN,C,sECPYG,E,QAAaC,EAAAA,KAAH,qH,SCCVC,EAAO,SAAC,GAA4B,IAA1BL,EAAyB,EAAzBA,SAAUM,EAAe,EAAfA,SAC/B,OAAO,SAACH,EAAD,CAAYG,SAAUA,EAAtB,SAAiCN,GACzC,C,sECHYO,E,QAAcH,EAAAA,MAAH,2L,SCCXI,EAAQ,SAAC,GAQf,IAPLC,EAOI,EAPJA,MACAC,EAMI,EANJA,SACAC,EAKI,EALJA,KACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,MACAC,EACI,EADJA,SAEA,OACE,SAACR,EAAD,CACEG,SAAUA,EACVD,MAAOA,EACPE,KAAMA,EACNC,KAAMA,EACNC,QAASA,EACTC,MAAOA,EACPC,SAAUA,GAGf,C,qECrBYC,E,QAAcZ,EAAAA,MAAH,4I,SCCXa,EAAQ,SAAC,GAAkB,IAAhBjB,EAAe,EAAfA,SACtB,OAAO,SAACgB,EAAD,UAAchB,GACtB,C,sECHYkB,E,QAAQd,EAAAA,GAAH,iH,SCCLe,EAAe,SAAC,GAAe,IAAbL,EAAY,EAAZA,MAC7B,OAAO,SAACI,EAAD,UAAQJ,GAChB,C,+OCKYM,EAAe,WAC1B,IAAMC,EAAkB,CACtBT,KAAM,GACNU,MAAO,GACPC,SAAU,IAEZ,GAAgCC,EAAAA,EAAAA,UAASH,GAAzC,eAAOI,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EACc,KAAlBJ,EAASb,MAAkC,KAAnBa,EAASH,OAAsC,KAAtBG,EAASF,SAEtDO,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBpB,EAAR,EAAQA,KAAMH,EAAd,EAAcA,MACdiB,GAAY,SAAAO,GAAY,yBAAUA,GAAV,cAAyBrB,EAAOH,GAAhC,GACzB,EAEKyB,EAAY,mCAAG,WAAMH,GAAN,wEACnBA,EAAMI,iBADa,kBAGXR,GAASS,EAAAA,EAAAA,IAAcX,IAAWY,SAHvB,OAIjBC,EAAAA,OAAAA,QAAe,oDACfC,IALiB,gDAOjBD,EAAAA,OAAAA,QAAe,gDAPE,yDAAH,sDAWZC,EAAY,WAChBb,EAAYL,EACb,EAED,OACE,UAAChB,EAAA,EAAD,CAAMC,SAAU4B,EAAhB,WACE,UAACjB,EAAA,EAAD,WAAO,QAEL,SAACT,EAAAgC,EAAD,CACE/B,MAAOgB,EAASb,KAChBF,SAAUoB,EACVnB,KAAK,OACLC,KAAK,aAGT,UAACK,EAAA,EAAD,WAAO,SAEL,SAACT,EAAAgC,EAAD,CACE/B,MAAOgB,EAASH,MAChBZ,SAAUoB,EACVnB,KAAK,QACLC,KAAK,cAGT,UAACK,EAAA,EAAD,WAAO,YAEL,SAACT,EAAAgC,EAAD,CACE/B,MAAOgB,EAASF,SAChBb,SAAUoB,EACVnB,KAAK,WACLC,KAAK,WACLC,QAAQ,QACRC,MAAM,oDAGV,SAACf,EAAA,EAAD,CAAQY,KAAK,SAAST,SAAU2B,EAAhC,SAA4D,cAG5D,SAAC,KAAD,CAAMY,GAAG,SAAT,SAAkB,YAGvB,ECnED,EATqB,WACnB,OACE,iCACE,SAACtB,EAAA,EAAD,CAAcL,MAAM,2BACpB,SAACM,EAAD,MAGL,C","sources":["components/common/Button/Button.jsx","components/common/Form/Form.styled.jsx","components/common/Form/Form.jsx","components/common/Input/Input.styled.jsx","components/common/Input/Input.jsx","components/common/Label/Label.styled.jsx","components/common/Label/Label.jsx","components/common/SectionTitle/SectionTitle.styled.jsx","components/common/SectionTitle/SectionTitle.jsx","components/RegisterForm/RegisterForm.jsx","components/pages/RegisterPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { ButtonStyled } from './Button.styled';\n\nexport const Button = ({ children, onClick, disabled }) => {\n  return (\n    <ButtonStyled onClick={onClick} disabled={disabled}>\n      {children}\n    </ButtonStyled>\n  );\n};\n\nButton.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n    .isRequired,\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool,\n};\n","import styled from '@emotion/styled';\n\nexport const FormStyled = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { FormStyled } from './Form.styled';\n\nexport const Form = ({ children, onSubmit }) => {\n  return <FormStyled onSubmit={onSubmit}>{children}</FormStyled>;\n};\n\nForm.propTypes = {\n  children: PropTypes.node.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const InputStyled = styled.input`\n  width: 100%;\n  max-width: 300px;\n  padding: 10px;\n  margin-top: 5px;\n  border: none;\n  border-radius: 5px;\n  box-shadow: inset 0px 0px 8px 0px #33333347;\n`;\n","import PropTypes from 'prop-types';\nimport { InputStyled } from './Input.styled';\n\nexport const Input = ({\n  value,\n  onChange,\n  type,\n  name,\n  pattern,\n  title,\n  required,\n}) => {\n  return (\n    <InputStyled\n      onChange={onChange}\n      value={value}\n      type={type}\n      name={name}\n      pattern={pattern}\n      title={title}\n      required={required}\n    ></InputStyled>\n  );\n};\n\nInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  type: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  pattern: PropTypes.string,\n  title: PropTypes.string,\n  required: PropTypes.bool,\n};\n","import styled from '@emotion/styled';\n\nexport const LabelStyled = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 15px;\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { LabelStyled } from './Label.styled';\n\nexport const Label = ({ children }) => {\n  return <LabelStyled>{children}</LabelStyled>;\n};\n\nLabel.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\n  text-align: center;\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 10px;\n`;","import PropTypes from 'prop-types';\nimport { Title } from './SectionTitle.styled';\n\nexport const SectionTitle = ({ title }) => {\n  return <Title>{title}</Title>;\n};\n\nSectionTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Button } from 'components/common/Button';\nimport { Form } from 'components/common/Form';\nimport { Input } from 'components/common/Input';\nimport { Label } from 'components/common/Label';\nimport { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { registerThunk } from 'redux/auth/thunks';\n\nexport const RegisterForm = () => {\n  const initialFormData = {\n    name: '',\n    email: '',\n    password: '',\n  };\n  const [formData, setFormData] = useState(initialFormData);\n  const dispatch = useDispatch();\n\n  const isAddContactButtonDisabled =\n    formData.name === '' || formData.email === '' || formData.password === '';\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormData(prevFormData => ({ ...prevFormData, [name]: value }));\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      await dispatch(registerThunk(formData)).unwrap();\n      Notify.success('You have successfully registered. Please log in.');\n      resetForm();\n    } catch (error) {\n      Notify.failure('Registration failed. Please try again later.');\n    }\n  };\n\n  const resetForm = () => {\n    setFormData(initialFormData);\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Name\n        <Input\n          value={formData.name}\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n        />\n      </Label>\n      <Label>\n        Email\n        <Input\n          value={formData.email}\n          onChange={handleChange}\n          type=\"email\"\n          name=\"email\"\n        />\n      </Label>\n      <Label>\n        Password\n        <Input\n          value={formData.password}\n          onChange={handleChange}\n          type=\"password\"\n          name=\"password\"\n          pattern=\".{7,}\"\n          title=\"Password must be at least 7 characters long\"\n        />\n      </Label>\n      <Button type=\"submit\" disabled={isAddContactButtonDisabled}>\n        Register\n      </Button>\n      <Link to=\"/login\">Login</Link>\n    </Form>\n  );\n};\n","import { SectionTitle } from 'components/common/SectionTitle';\nimport { RegisterForm } from 'components/RegisterForm';\n\nconst RegisterPage = () => {\n  return (\n    <>\n      <SectionTitle title=\"Please register first\"></SectionTitle>\n      <RegisterForm />\n    </>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["Button","children","onClick","disabled","FormStyled","styled","Form","onSubmit","InputStyled","Input","value","onChange","type","name","pattern","title","required","LabelStyled","Label","Title","SectionTitle","RegisterForm","initialFormData","email","password","useState","formData","setFormData","dispatch","useDispatch","isAddContactButtonDisabled","handleChange","event","target","prevFormData","handleSubmit","preventDefault","registerThunk","unwrap","Notify","resetForm","I","to"],"sourceRoot":""}